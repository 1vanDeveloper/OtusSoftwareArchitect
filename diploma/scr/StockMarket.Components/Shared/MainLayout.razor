@using StockMarket.Shared.ViewModels.Interfaces
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject ILoginViewModel LoginViewModel
@inject IJSRuntime JsRuntime
@inject IAccessTokenService AccessTokenService
@inject INotificationService NotificationService

<div class="page">
    <div class="sidebar">
        <AuthorizeView>
            <Authorized>
                <NavMenu />
            </Authorized>
        </AuthorizeView>
    </div>
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout="3"
                    IconType="IconType.FontAwesome"
                    SuccessClass="success-toast-override"
                    SuccessIcon="fa fa-thumbs-up"
                    ErrorIcon="fa fa-bug" />
    <div class="main">
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <p id="p_welcome_message" style="font-size: larger;"><b>Hello, @context.User?.Identity?.Name</b></p> &nbsp; &nbsp;
                    <button class="btn btn-danger" @onclick="LogoutUser">Logout</button>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
</div>

@code {
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var jwtToken = await AccessTokenService.GetAccessTokenAsync("jwt_token");
        if (jwtToken == null)
        {
            return;
        }

        jwtToken = $@"""{jwtToken}""";
        var currentUser = LoginViewModel.GetUser(jwtToken);

        if (currentUser != null)
        {
    //setting the themeName parameter for JS function
            var themeName = "dark"; // "light";
    //calling the JS function
            var module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/StockMarket.Components/js/site.js");
            await module.InvokeVoidAsync("setTheme", themeName);
        }
    }

    private async Task LogoutUser()
    {
        await NotificationService.StopAsync();
        await AccessTokenService.RemoveAccessTokenAsync("jwt_token");
        NavigationManager.NavigateTo("/", true);
    }
}
