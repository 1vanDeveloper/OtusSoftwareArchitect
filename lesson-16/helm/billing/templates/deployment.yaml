apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ include "helm.fullname" . }}-dep"
  labels:
    {{- include "helm.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "helm.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config.yaml") . | sha256sum }}
    spec:
      initContainers:
        - name: check-db-ready
          image: postgres:latest
          env:
            - name: POSTGRES_HOST
              value: {{ include "postgresql.fullname" . | quote }}
            - name: POSTGRES_PORT
              value: {{ .Values.postgresql.service.port | quote }}
          command:
            - sh
            - "-c"
            - |
              until pg_isready -h $POSTGRES_HOST  -p  $POSTGRES_PORT; 
              do echo waiting for database; sleep 2; done;
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              port: 80
              path: /liveness
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 6
          readinessProbe:
            httpGet:
              port: 80
              path: /readiness
            initialDelaySeconds: 15
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: USERS_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ include "helm.fullname" . }}-secret"
                  key: USERS_PG_PASSWORD
            - name: USERS_PG_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: USERS_PG_DATABASE
            - name: USERS_PG_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: USERS_PG_USERNAME
            - name: USE_SSL_PG_CONNECTION
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: USE_SSL_PG_CONNECTION
            - name: MIGRATION_MODE
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: MIGRATION_MODE_FALSE
            - name: ORCHESTRATOR_TYPE
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: ORCHESTRATOR_TYPE
            - name: IDENTITY_SERVER_URL
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: IDENTITY_SERVER_URL
            - name: ACCOUNT_SERVICE_URL
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: ACCOUNT_SERVICE_URL
            - name: EVENT_BUS_CONNECTION
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: EVENT_BUS_CONNECTION
            - name: QUEUE_NAME
              valueFrom:
                configMapKeyRef:
                  name: "{{ include "helm.fullname" . }}-config"
                  key: QUEUE_NAME
