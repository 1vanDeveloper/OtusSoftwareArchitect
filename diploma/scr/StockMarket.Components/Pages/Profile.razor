@page "/profile"

@using StockMarket.Shared.ViewModels.Interfaces

@inject IAccountViewModel AccountViewModel
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h2 class="white-text"><b>Profile</b></h2> 
<hr class="white-horizontal-line"/>

<SpinLoader IsLoading="IsLoading">
    <LoadingTemplate>
        <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
            <br /><br />
            <Chase Center="true" Color="blue" Size="70px"></Chase>
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div class="row">
            <div class="col-lg-8 col-md-6 col-sm-12">
                <input type="text" @bind-value="AccountViewModel.Account.FirstName" class="form-control dark-theme-textbox" placeholder="first name">
                <br/>
                <input type="text" @bind-value="AccountViewModel.Account.LastName" class="form-control dark-theme-textbox" placeholder="last name">
                <br/>
                <input type="text" @bind-value="AccountViewModel.Account.Phone" class="form-control dark-theme-textbox" placeholder="phone">
                <br/>
                <button class="btn btn-primary" disabled="@(!IsUserAuthorized)" @onclick="UpdateProfile">Save</button>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>

<ActivateMessage></ActivateMessage>

<br />

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool IsLoading { get; set; } = true;
    private bool IsUserAuthorized { get; set; }

    protected override async Task OnInitializedAsync() 
    {
        var authState = await AuthenticationState!;
        var user = authState.User;

        if(user.Identity is { IsAuthenticated: true })
        {
            IsUserAuthorized = true;

            try
            {
                await AccountViewModel.GetAsync();
                IsLoading = false;
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                //_navigationManager.NavigateTo("/", true);
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task UpdateProfile()
    {
        await AccountViewModel.UpdateAsync();
        ToastService.ShowSuccess("Profile info has been saved successfully.");
    }
}
